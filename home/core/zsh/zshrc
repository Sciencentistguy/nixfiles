# Shell options
# Init prompt and colours
autoload -U compinit promptinit
autoload -U colors && colors
compinit
promptinit

setopt AUTO_PUSHD
setopt SHARE_HISTORY
setopt completealiases
setopt extendedglob

unsetopt nomatch
unsetopt correct
unsetopt correct_all

zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' menu select

# Path
if [ -z "${IN_NIX_SHELL}" ]; then
    #TODO: `nix shell` does not set IN_NIX_SHELL
    source "$HOME/.zsh/path.zsh"
fi

# Prompt
if type starship >/dev/null; then
    eval "$(starship init zsh)"
    RPROMPT=""
else
    prompt walters
fi

# Aliases
source ~/.zsh/aliases.zsh

# Functions
source ~/.zsh/functions.zsh

# Environment
source ~/.zsh/environment.zsh

if [[ $(uname) == "Darwin" ]]; then
    if [ -f "/etc/static/zshrc" ]; then
        source "/etc/static/zshrc"
    fi
fi

# Do not set GIT_PAGER if diff.external is set
if type git >/dev/null && [[ $(git config diff.external) == "" ]]; then
    if type bat >/dev/null && type delta >/dev/null; then
        export GIT_PAGER='delta | bat --style=numbers,header'
    fi
fi

if type clang >/dev/null; then
    export CC=clang
    export CXX=clang++
fi

if [ -f "$HOME/.config/python/startup.py" ]; then
    export PYTHONSTARTUP="$HOME/.config/python/startup.py"
fi

if type bat >/dev/null; then
    export MANPAGER="sh -c 'col -bx | bat -l man -p'"
fi

if [ -d "/etc/nix/path" ]; then
    export NIX_PATH="/etc/nix/path"
fi

zle -N sudo-command-line
bindkey "\e\e" sudo-command-line
bindkey -M vicmd '\e\e' sudo-command-line

if [ -d /etc/zsh/zshrc.d ]; then
    for file in /etc/zsh/zshrc.d/*; do
        source $file
    done
fi

eval $(ssh-agent) >/dev/null

# Command-not-found
if [ -f ~/.zsh/command-not-found.zsh ]; then
    source ~/.zsh/command-not-found.zsh
fi

# Plugins
source ~/.zsh/plugins.zsh

# Largely taken from
# https://github.com/ellie/atuin/blob/aa556fa0883d1a5c8f35960c9d6e8966e4307896/src/shell/atuin.zsh
if type atuin >/dev/null; then
    autoload -U add-zsh-hook

    export ATUIN_SESSION=$(atuin uuid)
    export ATUIN_HISTORY="atuin history list"
    export ATUIN_BINDKEYS="true"

    _atuin_preexec() {
        id=$(atuin history start -- "$1")
        export ATUIN_HISTORY_ID="$id"
    }

    _atuin_precmd() {
        local EXIT="$?"

        [[ -z "${ATUIN_HISTORY_ID}" ]] && return

        (RUST_LOG=error atuin history end --exit $EXIT -- $ATUIN_HISTORY_ID &) >/dev/null 2>&1
    }

    _atuin_search() {
        emulate -L zsh
        zle -I

        # Switch to cursor mode, then back to application
        echoti rmkx
        # swap stderr and stdout, so that the tui stuff works
        # TODO: not this
        output=$(RUST_LOG=error atuin search -i -- $BUFFER 3>&1 1>&2 2>&3)
        echoti smkx

        if [[ -n $output ]]; then
            LBUFFER=$output
        fi

        zle reset-prompt
    }

    add-zsh-hook preexec _atuin_preexec
    add-zsh-hook precmd _atuin_precmd

    zle -N _atuin_search_widget _atuin_search

    if [[ $ATUIN_BINDKEYS == "true" ]]; then
        bindkey '^r' _atuin_search_widget
    fi
fi

function zvm_after_init() {
    zvm_bindkey viins '^R' _atuin_search_widget
    zvm_bindkey vicmd '^R' _atuin_search_widget
}

zvm_after_init_commands+=("bindkey '^[[A' up-line-or-search" "bindkey '^[[B' down-line-or-search")

alias luamake=/home/jamie/Git/dotfiles/nvim/lua-language-server/3rd/luamake/luamake
